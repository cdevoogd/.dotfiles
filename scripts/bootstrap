#!/usr/bin/env bash
# ----------------------------------------------------------------------------------------------------------------------
# bootstrap
# Bootstrap is used to quickly install and setup your machine.
# Bootstrap creates symlinks to your home directory and sets up zsh dependencies.
# ----------------------------------------------------------------------------------------------------------------------

set -e
cd "$(dirname "$0")/.."
DOTFILES_ROOT=$(pwd -P)
source scripts/common/checks.sh
source scripts/common/logging.sh

function main() {

    echo
    setup_zsh
    setup_git
    setup_dotfiles
    echo

}

function setup_zsh() {
    log_info "Starting ZSH setup..."

    log_info "Downloading Starship prompt..."
    log_warn "This may require you to enter your password."
    curl -fsSL https://starship.rs/install.sh | bash -s  -- --force &> /dev/null
    log_success "Successfully downloaded Starship!"

    log_info "Downloading ZSH plugins..."
    git submodule update --init --recursive &> /dev/null
    log_success "Successfully downloaded ZSH plugins!"

    log_success "Successfully set up ZSH!"
}

function setup_git() {
    log_info "Starting Git setup..."

    if ! [[ -f git/symlink.gitconfig.local ]]; then
        log_info "Setting up Git author information..."

        local credential_helper="cache"
        if running_on_mac; then
            credential_helper="osxkeychain"
        fi
        local name
        local email
        log_question "Enter your name: "
        read -e -r name
        log_question "Enter your email: "
        read -e -r email 
        sed -e "s/AUTHORNAME/$name/g" -e "s/AUTHOREMAIL/$email/g" -e "s/GIT_CREDENTIAL_HELPER/$credential_helper/g" git/template.gitconfig.local > git/symlink.gitconfig.local

        log_success "Successfully set up Git author information!"
    fi

    log_success "Successfully set up Git!"
}

function setup_dotfiles() {
    confirm_hushlogin

    log_info "Linking dotfiles to the home directory..."

    local overwrite_all=false
    local skip_all=false

    for src in $(find -H "$DOTFILES_ROOT" -maxdepth 2 -name 'symlink.*')
    do
        filename=$(basename "${src}")
        without_prefix="${filename##symlink}"
        dst="$HOME/$without_prefix"
        _link_file "$src" "$dst"
    done

    log_success "Successfully linked dotfiles!"
}

function confirm_hushlogin() {
    log_question "Would you like to add a .hushlogin to this machine?"
    select yn in "Yes" "No"; do
        case $yn in
            Yes ) touch system/symlink.hushlogin; break;;
            No ) break;;
        esac
    done
}

function _link_file() {
    local source=$1 
    local destination=$2
    local skip=
    local overwrite= 
    local action=

    if [[ -f "$destination" || -d "$destination" || -L "$destination" ]]; then
        if [ "$overwrite_all" == "false" ] && [ "$skip_all" == "false" ]; then
            local existingSource="$(readlink $destination)"

            if [ "$existingSource" == "$source" ]; then
                skip=true
            else
                log_warn "File already exists: $destination"
                log_question "Resolution Options: [s]kip, [S]kip All, [o]verwrite, or [O]verwrite All"
                read -n 1 action
                echo
                
                case "$action" in
                    s ) skip=true;;
                    S ) skip_all=true;;
                    o ) overwrite=true;;
                    O ) overwrite_all=true;;
                    * ) exit 1;;
                esac
            fi
        fi

        overwrite=${overwrite:-$overwrite_all}
        skip=${skip:-$skip_all}

        if [ "$overwrite" == "true" ]; then
            rm -rf "$destination"
            log_info "Removed $destination"
        fi

        if [ "$skip" == "true" ]; then
            log_info "Skipped $destination"
        fi
    fi

    # If skip is false or empty:
    if [ "$skip" != "true" ]; then
        ln -s "$source" "$destination"
        log_info "Linked $source -> $destination"
    fi
}

main "$@"
