#!/usr/bin/env python3

"""
A script to show git branches side-by-side with their descriptions. It is recommended that this
script be aliased to `git branches`. There are two methods to do so:

    1. If you add this script to your PATH, and keep it named as `git-branches`, you will
       automatically be able to run it using `git branches`.

    2. If you add the script to your PATH, you can add a git alias using the following command:
        git config --global alias.branches '! git-branches'
"""

from dataclasses import dataclass
from enum import Enum
import subprocess
from typing import List, Optional


class Color(str, Enum):
    BLUE = "\033[34m"
    CYAN = "\033[96m"
    GREEN = "\033[92m"
    GRAY = "\033[1;30m"
    BOLD = "\033[1m"
    ITALIC = "\033[3m"
    RESET = "\033[0m"


def colored(color: Color, s: str) -> str:
    return f"{color}{s}{Color.RESET}"


def bold(s: str) -> str:
    return f"{Color.BOLD}{s}{Color.RESET}"


def italic(s: str) -> str:
    return f"{Color.ITALIC}{s}{Color.RESET}"


@dataclass
class Commit:
    time: str
    hash: str
    message: str


class BranchType(Enum):
    NORMAL = 0
    CURRENT = 1
    WORKTREE = 2


class Branch:
    # Per the documentation for `git branch`:
    #   Current Branch: Prefixed with '*' and displayed in green
    #   Worktree: Prefixed with '+' and displayed in cyan
    PREFIX_CURRENT = "* "
    PREFIX_WORKTREE = "+ "

    def __init__(self, branch: str) -> None:
        branch_type = BranchType.NORMAL

        if Branch.is_current(branch):
            branch = branch.lstrip(Branch.PREFIX_CURRENT)
            branch_type = BranchType.CURRENT
        elif Branch.is_worktree(branch):
            branch = branch.lstrip(Branch.PREFIX_WORKTREE)
            branch_type = BranchType.WORKTREE

        self.name = branch.strip()
        self.type = branch_type

    @staticmethod
    def is_current(branch: str) -> bool:
        return branch.startswith(Branch.PREFIX_CURRENT)

    @staticmethod
    def is_worktree(branch: str) -> bool:
        return branch.startswith(Branch.PREFIX_WORKTREE)

    @property
    def description(self) -> str:
        cmd = subprocess.run(
            ["git", "config", "--get", f"branch.{self.name}.description"],
            capture_output=True,
            text=True,
        )
        return cmd.stdout.strip() if cmd.returncode == 0 else ""

    @property
    def last_commit(self) -> Optional[Commit]:
        cmd = subprocess.run(
            ["git", "log", "-1", "--format=format:%ah|%h|%s", self.name],
            capture_output=True,
            text=True,
        )
        if cmd.returncode != 0:
            return None

        parts = cmd.stdout.strip().split("|", 2)
        return Commit(parts[0], parts[1], parts[2])


def in_git_repo() -> bool:
    cmd = subprocess.run(["git", "branch"], capture_output=True)
    return cmd.returncode == 0


def get_branches() -> List[Branch]:
    cmd = subprocess.run(
        ["git", "branch", "--list"], capture_output=True, check=True, text=True
    )
    branches = cmd.stdout.splitlines()

    output = []
    for b in branches:
        output.append(Branch(b))

    return output


def print_formatted(branch: Branch):
    name = colored(Color.BLUE, branch.name)
    if branch.type == BranchType.CURRENT:
        name = colored(Color.GREEN, f"{branch.name} (current)")
    elif branch.type == BranchType.WORKTREE:
        name = colored(Color.CYAN, f"{branch.name} (worktree)")

    desc = branch.description
    commit = branch.last_commit

    print(f"  {bold(name)}")
    if desc:
        print(f"  {desc}")
    if commit:
        msg = italic(f"* [{commit.hash}] {commit.message} ({commit.time})")
        print(f"  {msg}")


def main():
    if not in_git_repo():
        print("Fatal: Not currently in a git repository")
        exit(1)

    branches = get_branches()
    for branch in branches:
        print()
        print_formatted(branch)


if __name__ == "__main__":
    main()
