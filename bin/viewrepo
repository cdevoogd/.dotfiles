#!/usr/bin/env python3
import argparse
import os
import subprocess
from urllib.parse import urlparse

TEMP_DIR = "/tmp/repos"


def get_repo_url() -> str:
    p = argparse.ArgumentParser()
    p.add_argument("repo_url", help="The repo URL to clone and open")
    args = p.parse_args()
    return args.repo_url


def get_full_url(original: str) -> str:
    url = urlparse(original)
    slash_count = url.path.count("/")
    # Full URL (https://github.com/user/repo or ssh://git@github.com:user/repo)
    if url.scheme != "":
        return original
    # URL without scheme (github.com/user/repo)
    if slash_count == 2:
        return f"https://{url.path}"
    # Just repo path (user/repo)
    if slash_count == 1:
        return f"https://github.com/{url.path}"
    return ""


def get_editor() -> str:
    visual = os.getenv("VISUAL")
    if visual:
        return visual
    editor = os.getenv("EDITOR")
    if editor:
        return editor
    return "vim"


def main():
    raw_url = get_repo_url()
    full_url = get_full_url(raw_url)
    if full_url == "":
        print("Invalid URL format. Unable to determine the full URL to clone")
        exit(1)

    repo_name = full_url.rsplit("/", 1)[-1]
    dest_dir = os.path.join(TEMP_DIR, repo_name)

    if not os.path.isdir(dest_dir):
        print("Creating a shallow clone of the repository")
        print("If it asks for auth info, the URL is probably invalid or doesn't exist")
        print(f"  url: {full_url}")
        print(f"  dir: {dest_dir}")
        proc = subprocess.run(["git", "clone", "--depth", "1", full_url, dest_dir])
        if proc.returncode != 0:
            exit(proc.returncode)

    editor = get_editor()
    subprocess.run([editor, "."], cwd=dest_dir)


if __name__ == "__main__":
    main()
